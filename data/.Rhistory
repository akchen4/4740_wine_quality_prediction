knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
data=Default
View(data)
glm.fit <- glm(default~ income + balance, data = data, family = binomial)
summary(glm.fit)
View(data)
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
table(glm.pred, validation)
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
table(glm.predictions, validation)
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,2500)
glm.predictions[glm.probs > 0.5] = 1
#e
table(glm.predictions, validation)
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
table(glm.predictions, validation)
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
table(glm.predictions, validation$default)
mean(glm.predictions != validation$default)
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
table(glm.predictions, validation$default)
mean(glm.predictions != as.numeric(validation$default))
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
table(glm.predictions, as.numeric(validation$default))
mean(glm.predictions != as.numeric(validation$default))
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
default.validation <- rep(NA, 5000)
for(i in 1:5000){
if(validation$default[i] = 'Yes'){
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
v <- validation$default
default.validation <- rep(NA, 5000)
for(i in 1:5000){
if(v[i] = 'Yes'){
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
v <- validation$default
default.validation <- rep(NA, 5000)
for(i in 1:5000){
if(v[i] == 'Yes'){
default.validation[i] = 1
} else default.validation[i] = 0
}
table(glm.predictions, validation$default)
mean(glm.predictions != validation$default)
#a
set.seed(1)
#b
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
#c
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
#d
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
#e
v <- validation$default
default.validation <- rep(NA, 5000)
for(i in 1:5000){
if(v[i] == 'Yes'){
default.validation[i] = 1
} else default.validation[i] = 0
}
table(glm.predictions, default.validation)
mean(glm.predictions != default.validation)
logistic.validation <- function(n){
set.seed(n)
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
train.glm <- glm(default ~ income + balance, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
v <- validation$default
default.validation <- rep(NA, 5000)
for(i in 1:5000){
if(v[i] == 'Yes'){
default.validation[i] = 1
} else default.validation[i] = 0
}
table(glm.predictions, default.validation)
mean(glm.predictions != default.validation)
}
logistic.validation(2)
logistic.validation(3)
for(n in 1:3){
set.seed(n)
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
train.glm <- glm(default ~ income + balance + student, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
v <- validation$default
default.validation <- rep(NA, 5000)
for(i in 1:5000){
if(v[i] == 'Yes'){
default.validation[i] = 1
} else default.validation[i] = 0
}
table(glm.predictions, default.validation)
mean(glm.predictions != default.validation)
}
for(n in 1:3){
set.seed(n)
train.index <- sample(1:10000, size=5000)
train <- data[train.index,]
validation <- data[-train.index,]
train.glm <- glm(default ~ income + balance + student, data=train, family=binomial)
glm.probs <- predict(train.glm, validation, type='response')
glm.predictions <- rep(0,5000)
glm.predictions[glm.probs > 0.5] = 1
v <- validation$default
default.validation <- rep(NA, 5000)
for(i in 1:5000){
if(v[i] == 'Yes'){
default.validation[i] = 1
} else default.validation[i] = 0
}
table(glm.predictions, default.validation)
print(mean(glm.predictions != default.validation))
}
#5-fold cross-validation
glm.fit <- glm(default ~ income + balance + student, data=data)
View(data)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data, NA.rm = T)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data)
library(boot)
glm.fit=glm(mpg~horsepower,data=Auto)
cv.err=cv.glm(Auto,glm.fit)
cv.err$delta
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, k=5)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data, family='binomial')
cv.error <- cv.glm(data, glm.fit, k=5)
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data, family='binomial')
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
#5-fold cross-validation
library(boot)
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
library(boot)
#5-fold cross-validation
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
#LOOCV
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
coef(glm.fit)
lm.fit <- lm(default ~ income + balance + student, data=data, family=binomial)
coef(lm.fit)
library(boot)
#5-fold cross-validation
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
#LOOCV
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
coef(glm.fit)
lm.fit <- lm(default ~ income + balance + student, data=data)
coef(lm.fit)
library(boot)
#5-fold cross-validation
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
#LOOCV
glm.fit <- glm(default ~ income + balance + student, data=data)
library(boot)
#5-fold cross-validation
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
#LOOCV
lm.fit <- lm(default ~ income + balance + student, data=data)
cv.error <- cv.glm(data, lm.fit)
library(boot)
#5-fold cross-validation
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
#LOOCV
set.seed(1)
library(boot)
#5-fold cross-validation
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
#LOOCV
library(ISLR2)
install.packages("ISLR2")
library(ISLR2)
library(ISLR2)
boston <- Boston
View(boston)
mu_hat <- mean(boston$medv)
mu_hat
se.muhat <- sd(boston$medv)/sqrt(length(boston$medv))
se.muhat
bootstrap.estimator <- function(data, index){
return(mean(data[index]))
}
se.bootstrap <- boot(boston, bootstrap.estimator, R=10000)
bootstrap.estimator <- function(data, index){
return(mean(data[index]))
}
se.bootstrap <- boot(boston$medv, bootstrap.estimator, R=10000)
se.bootstrap
#using bootstrap-calculated SE
lower <- mu.hat - 2*
se.bootstrap$t0
mu.hat <- mean(boston$medv)
mu.hat
se.bootstrap$t0
se.bootstrap$R
bootstrap.summary <- summary(se.bootstrap)
bootstrap.summary$bootSE
summary(se.bootstrap)$bootSE
sd(se.bootstrap$t)
#using bootstrap-calculated SE
conf.int <- c(mu.hat - 2*sd(se.bootstrap$t), mu.hat + 2*sd(se.bootstrap$t))
conf.int
#using t-test
t.test(boston$medv)
mu.med <- median(boston$medv)
mu.med
bootstrap.median <- function(data, index){
return(median(data[index]))
}
se.boot.med <- boot(boston$medv, bootstrap.median, R=10000)
se.boot.med
muhat.point1
muhat.point1 <- quantile(boston$medv, 0.1)
muhat.point1
bootstrap.point1 <- function(data, index){
return(quantile(data[index], 0.1))
}
se.boot.point1 <- boot(boston$medv, bootstrap.point1, R=10000)
se.boot.point1
set.seed(1)
library(boot)
# without student
glm.fit <- glm(default ~ income + balance, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
# with student
glm.fit <- glm(default ~ income + balance + student, data=data, family=binomial)
cv.error <- cv.glm(data, glm.fit, K=5)
cv.error$delta
set.seed(1)
bootstrap.estimator <- function(data, index){
return(mean(data[index]))
}
se.bootstrap <- boot(boston$medv, bootstrap.estimator, R=1000)
se.bootstrap
bootstrap.median <- function(data, index){
return(median(data[index]))
}
se.boot.med <- boot(boston$medv, bootstrap.median, R=1000)
se.boot.med
bootstrap.point1 <- function(data, index){
return(quantile(data[index], 0.1))
}
se.boot.point1 <- boot(boston$medv, bootstrap.point1, R=1000)
se.boot.point1
knitr::opts_chunk$set(echo = TRUE)
#Setup
set.seed(1)
white <- read.csv('winequality-white.csv', sep=';')
getwd()
setwd("C:/Users/zqche/stsci4740/wine+quality")
#Setup
set.seed(1)
white <- read.csv('winequality-white.csv', sep=';')
#Setup
set.seed(1)
white <- read.csv('winequality-white.csv', sep=';')
setwd('C:\Users\zqche\stsci4740\wine+quality')
setwd('C:/Users/zqche/stsci4740/wine+quality')
white <- read.csv('winequality-white.csv', sep=';')
white <- read.csv('winequality-white', sep=';')
white <- read.csv('winequality-white.csv', sep=';')
red <- read.csv('winequality-red.csv', sep=';')
#Setup
set.seed(1)
white <- read.csv('winequality-white.csv', sep=';')
